/**
 * Debug-Konsole f√ºr Hangar Planner Display Options
 * Kann √ºber window.displayOptionsDebug aufgerufen werden
 */

window.displayOptionsDebug = {
	/**
	 * Zeigt den aktuellen Status aller relevanten Systeme
	 */
	status() {
		console.log("üîç === DISPLAY OPTIONS DEBUG STATUS ===");

		// Display Options System
		console.log("\nüìä Display Options System:");
		if (window.displayOptions) {
			console.log("‚úÖ window.displayOptions verf√ºgbar");
			console.log("Aktuelle Werte:", window.displayOptions.current);
			console.log("Default Werte:", window.displayOptions.defaults);
		} else {
			console.log("‚ùå window.displayOptions NICHT verf√ºgbar");
		}

		// Server Sync System
		console.log("\nüîÑ Server Sync System:");
		if (window.serverSync) {
			console.log("‚úÖ window.serverSync verf√ºgbar");
			console.log("Server URL:", window.serverSync.serverSyncUrl);
			console.log("Sync aktiv:", !!window.serverSync.serverSyncInterval);
		} else {
			console.log("‚ùå window.serverSync NICHT verf√ºgbar");
		}

		// UI Elemente
		console.log("\nüéõÔ∏è UI Elemente Status:");
		const elements = {
			tilesCount: document.getElementById("tilesCount"),
			secondaryTilesCount: document.getElementById("secondaryTilesCount"),
			layoutType: document.getElementById("layoutType"),
			darkModeToggle: document.getElementById("darkModeToggle"),
			viewModeToggle: document.getElementById("viewModeToggle"),
			displayZoom: document.getElementById("displayZoom"),
			updateTilesBtn: document.getElementById("updateTilesBtn"),
			updateSecondaryTilesBtn: document.getElementById(
				"updateSecondaryTilesBtn"
			),
		};

		Object.entries(elements).forEach(([name, element]) => {
			if (element) {
				const value =
					element.type === "checkbox" ? element.checked : element.value;
				console.log(`‚úÖ ${name}: ${value} (${element.tagName})`);
			} else {
				console.log(`‚ùå ${name}: NICHT gefunden`);
			}
		});

		// localStorage Pr√ºfung
		console.log("\nüíæ LocalStorage:");
		try {
			const displayOptions = localStorage.getItem("displayOptions");
			const hangarSettings = localStorage.getItem("hangarPlannerSettings");
			console.log(
				"displayOptions:",
				displayOptions ? JSON.parse(displayOptions) : "NICHT vorhanden"
			);
			console.log(
				"hangarPlannerSettings:",
				hangarSettings ? JSON.parse(hangarSettings) : "NICHT vorhanden"
			);
		} catch (error) {
			console.log("‚ùå localStorage Fehler:", error);
		}

		console.log("\nüîç === DEBUG STATUS ENDE ===");
	},

	/**
	 * Testet das Speichern und Laden
	 */
	async testSaveLoad() {
		console.log("üß™ === SAVE/LOAD TEST START ===");

		if (!window.displayOptions) {
			console.log("‚ùå Display Options nicht verf√ºgbar");
			return;
		}

		// Aktuelle Werte sichern
		const original = { ...window.displayOptions.current };
		console.log("Original:", original);

		// Test-Werte setzen
		const testValues = {
			tilesCount: 7,
			secondaryTilesCount: 3,
			layout: 2,
			darkMode: !original.darkMode,
			viewMode: !original.viewMode,
			zoomLevel: 125,
		};

		try {
			// Test-Werte anwenden
			window.displayOptions.current = { ...testValues };
			window.displayOptions.updateUI();
			console.log("‚úÖ Test-Werte gesetzt:", testValues);

			// Speichern
			const saveSuccess = await window.displayOptions.saveToServer();
			console.log(
				"Speichern:",
				saveSuccess ? "‚úÖ Erfolgreich" : "‚ùå Fehlgeschlagen"
			);

			// Kurz warten
			await new Promise((resolve) => setTimeout(resolve, 500));

			// Originale Werte setzen (simuliert Neustart)
			window.displayOptions.current = { ...original };

			// Laden
			const loadSuccess = await window.displayOptions.load();
			console.log(
				"Laden:",
				loadSuccess ? "‚úÖ Erfolgreich" : "‚ùå Fehlgeschlagen"
			);

			if (loadSuccess) {
				// Vergleiche geladene Werte
				const loaded = window.displayOptions.current;
				console.log("Geladen:", loaded);

				const isCorrect = Object.keys(testValues).every(
					(key) => loaded[key] === testValues[key]
				);

				console.log("Werte korrekt:", isCorrect ? "‚úÖ JA" : "‚ùå NEIN");

				if (!isCorrect) {
					Object.keys(testValues).forEach((key) => {
						if (loaded[key] !== testValues[key]) {
							console.log(
								`‚ùå ${key}: Erwartet ${testValues[key]}, erhalten ${loaded[key]}`
							);
						}
					});
				}
			}
		} catch (error) {
			console.error("‚ùå Test Fehler:", error);
		} finally {
			// Originale Werte wiederherstellen
			window.displayOptions.current = { ...original };
			window.displayOptions.updateUI();
			console.log("üîÑ Originale Werte wiederhergestellt");
		}

		console.log("üß™ === SAVE/LOAD TEST ENDE ===");
	},

	/**
	 * Repariert h√§ufige Probleme
	 */
	repair() {
		console.log("üîß === DISPLAY OPTIONS REPARATUR ===");

		if (window.displayOptions) {
			// Event-Handler neu setzen
			window.displayOptions.setupEventHandlers();
			console.log("‚úÖ Event-Handler neu gesetzt");

			// UI forciert aktualisieren
			window.displayOptions.updateUI();
			window.displayOptions.applySettings();
			console.log("‚úÖ UI forciert aktualisiert");

			// Critical Functions sicherstellen
			if (window.emergencyRepair) {
				window.emergencyRepair.ensureCriticalFunctions();
				console.log("‚úÖ Critical Functions √ºberpr√ºft");
			}
		} else {
			console.log("‚ùå Display Options nicht verf√ºgbar f√ºr Reparatur");
		}

		console.log("üîß === REPARATUR ABGESCHLOSSEN ===");
	},

	/**
	 * L√∂scht alle gespeicherten Einstellungen (VORSICHT!)
	 */
	reset() {
		const confirm = window.confirm(
			"WARNUNG: Alle Display Options Einstellungen werden gel√∂scht!\n\nFortfahren?"
		);
		if (!confirm) return;

		console.log("üóëÔ∏è === DISPLAY OPTIONS RESET ===");

		// localStorage l√∂schen
		localStorage.removeItem("displayOptions");
		localStorage.removeItem("hangarPlannerSettings");

		// Defaults setzen
		if (window.displayOptions) {
			window.displayOptions.current = { ...window.displayOptions.defaults };
			window.displayOptions.updateUI();
			window.displayOptions.applySettings();
		}

		console.log("‚úÖ Display Options zur√ºckgesetzt");
	},
};

// Hilfe-Funktion
window.displayOptionsHelp = function () {
	console.log(`
üîß DISPLAY OPTIONS DEBUG HILFE

Verf√ºgbare Befehle:
- window.displayOptionsDebug.status()     ‚Üí Zeigt aktuellen Status
- window.displayOptionsDebug.testSaveLoad() ‚Üí Testet Speichern/Laden
- window.displayOptionsDebug.repair()     ‚Üí Repariert h√§ufige Probleme
- window.displayOptionsDebug.reset()      ‚Üí Setzt alle Einstellungen zur√ºck (VORSICHT!)

F√ºr Hilfe: window.displayOptionsHelp()
    `);
};

console.log(
	"üîß Display Options Debug-Konsole geladen. Verwende window.displayOptionsHelp() f√ºr Hilfe."
);
